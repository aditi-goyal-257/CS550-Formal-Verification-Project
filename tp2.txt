    def findClosestPairInStrip(x: PairPoint)(@induct l: List[Point]):PairPoint =
    {
        require(isSortedY(l))
        if l.isEmpty || l.tail.isEmpty then x
        else {
            val p1 = findClosestPointInStrip(l.head)(pairDistance(x))(l.tail)
            assert(deltaSparsePoint(min(p1.distance(l.head), pairDistance(x)), l.head, l.tail))
            if pairDistance(x) <= p1.distance(l.head) then{
                val z = findClosestPairInStrip(x)(l.tail)
                ghost { reducingDeltaPreservesPointSparsity(pairDistance(x), pairDistance(z), l.head, l.tail) }
                z
            }
            else {
                val z = findClosestPairInStrip((l.head, p1))(l.tail)
                ghost { reducingDeltaPreservesPointSparsity(l.head.distance(p1), pairDistance(z), l.head, l.tail) }
                z
            }
        }
    }
    .ensuring(res0 => deltaSparse(pairDistance(res0), l) && pairDistance(res0) <= pairDistance(x) && (res0 == x || (l.contains(res0._1) && l.contains(res0._2))))
